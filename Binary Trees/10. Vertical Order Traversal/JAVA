// https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;

        // hdist - vdist, val
        Map<Integer, List<int[]>> mp = new TreeMap<>();
        // node-vdist, hdist
        Queue<Pair<TreeNode, Pair<Integer, Integer>>> q = new LinkedList<>();

        q.add(new Pair<>(root, new Pair<>(0, 0)));

        while (!q.isEmpty()) {
            int s = q.size();
            for (int i = 0; i < s; i++) {
                TreeNode front = q.peek().getKey();
                int vdist = q.peek().getValue().getKey();
                int hdist = q.peek().getValue().getValue();
                q.poll();
                mp.computeIfAbsent(hdist, k -> new ArrayList<>()).add(new int[]{vdist, front.val});

                if (front.left != null)
                    q.add(new Pair<>(front.left, new Pair<>(vdist + 1, hdist - 1)));
                if (front.right != null)
                    q.add(new Pair<>(front.right, new Pair<>(vdist + 1, hdist + 1)));
            }
        }

        for (List<int[]> entry : mp.values()) {
            entry.sort((a, b) -> a[0] != b[0] ? Integer.compare(a[0], b[0]) : Integer.compare(a[1], b[1]));
            List<Integer> curr = new ArrayList<>();
            for (int[] pair : entry)
                curr.add(pair[1]);
            res.add(curr);
        }

        return res;
    }
}