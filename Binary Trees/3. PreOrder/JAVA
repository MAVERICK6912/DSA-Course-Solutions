// https://leetcode.com/problems/binary-tree-preorder-traversal

//Time Complexity - O(N)
//Space Complexity - O(N)

// Solution 1 - Add checks before calls

class Solution {
    private void helper(TreeNode root, List<Integer> res) {
        res.add(root.val);
        if(root.left != null) helper(root.left, res);
        if(root.right != null) helper(root.right, res);
    }

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root != null)
            helper(root, res);
        return res;
    }
}

// Solution 2 - Add check in function

class Solution {
    private void helper(TreeNode root, List<Integer> res) {
        if(root == null) return;
        res.add(root.val);
        helper(root.left, res);
        helper(root.right, res);
    }

    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        helper(root, res);
        return res;
    }
}

// Iterative Solution

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        Stack<TreeNode> st = new Stack<>();
        st.push(root);

        while(!st.isEmpty()) {
            TreeNode topNode = st.peek();
            res.add(topNode.val);
            st.pop();
            if(topNode.right != null)
                st.push(topNode.right);
            if(topNode.left != null)
                st.push(topNode.left);
        }

        return res;
    }
}